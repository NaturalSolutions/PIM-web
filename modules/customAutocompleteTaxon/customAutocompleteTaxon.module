<?php

// $Id: customAutocomplete.module,v 1.2.2.4.2.17 2009/08/19 09:42:30 mh86 Exp $

/**
 * @file
 * Defines a widget type for content_taxonomy with autocomplete
 **/


/**
 * Implementation of hook_menu
 */
function customAutocompleteTaxon_menu() {
  $items['customAutocompleteTaxon/autocomplete'] = array(
    'title' => 'customAutocompleteTaxon',
    'page callback' => 'customAutocompleteTaxon_load',
    'access arguments' => array('access content'),
    'type' => MENU_CALLBACK
  );
  return $items;
}

/**
 * Implementation of FAPI hook_elements().
 *
 * Any FAPI callbacks needed for individual widgets can be declared here,
 * and the element will be passed to those callbacks for processing.
 *
 * Drupal will automatically theme the element using a theme with
 * the same name as the hook_elements key.
 *
 * Autocomplete_path is not used by text_widget but other widgets can use it
 * (see nodereference and userreference).
 */
function customAutocompleteTaxon_elements() {
  return array(
    'customAutocompleteTaxon' => array(
      '#input' => TRUE,
      '#columns' => array('value'), 
      '#delta' => 0,
      '#process' => array('customAutocompleteTaxon_process'),
      '#autocomplete_path' => FALSE,
      ),
    );
}


/**
 * Value for a content taxonomy autocomplete field
 *
 * returns the taxonomy term name for term ids
 */
function customAutocompleteTaxon_value($element, $edit = FALSE) {
  $field_key = $element['#columns'][0];
  $terms = array();
  if (count($element['#default_value'])) {
    foreach ($element['#default_value'] as $delta => $entry) {
      $terms[] = taxonomy_get_term($entry[$field_key]);
    }
  }
  $value = customAutocompleteTaxon_merge_tags($terms, $element['#vid']);
  $value = !empty($value) ? $value : NULL;
  return array($field_key => $value);
}



/**
 * Retrieve a pipe delimited string of autocomplete suggestions
 * 
 * @param String Fieldname
 * @param Integer TID of a parent (optional)
 * @param BOOLEAN whether a multiple field or not
 * @param STRING typed input
 */
function customAutocompleteTaxon_load($field_name, $string = '') {
//dd('customAutocompleteTaxon_load');
   // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  // This regexp allows the following types of user input:
  // this, "somecmpany, llc", "and ""this"" w,o.rks", foo bar
  $content_type_info = _content_type_info();
  $vid = $content_type_info['fields'][$field_name]['vid'];
  $tid = content_taxonomy_field_get_parent($content_type_info['fields'][$field_name]);
  
  // If the menu system has splitted the search text because of slashes, glue it back.
  if (func_num_args() > 2) {
    $args = func_get_args();
    $string .= '/'. implode('/', array_slice($args, 2));
  }
  
  // The user enters a comma-separated list of tags. We only autocomplete the last tag.
  $array = drupal_explode_tags($string);

  // Fetch last tag
  $last_string = trim(array_pop($array));
  $matches = array();
  if ($last_string != '') {
		$sql = "SELECT DISTINCT  `Taxon` as id, COALESCE(CONCAT(s.name,' ',  CONCAT('(',taxon,')')), taxon)  as name
				FROM {v_sys_bd_ni_all_present_common_content_with_thesaurus}
				LEFT OUTER JOIN {term_synonym} s
				ON TaxonID = tid AND NOT compartiment ='Faune et flore marines'
				WHERE (LOWER(taxon) LIKE LOWER('%s%%') OR LOWER(s.name) LIKE LOWER('%s%%')) 
				ORDER BY COALESCE(CONCAT(s.name,' ',  CONCAT('(',taxon,')')),taxon)";
    $result = db_query_range($sql,$last_string,$last_string,0,20);
    $prefix = count($array) ? '"'. implode('", "', $array) .'", ' : '';

    while ($tag = db_fetch_object($result)) {
      //$n = $tag->name;
	  $n = $tag->id;
      // Commas and quotes in terms are special cases, so encode 'em.
      if (strpos($tag->name, ',') !== FALSE || strpos($tag->name, '"') !== FALSE) {
        $n = '"'. str_replace('"', '""', $tag->id) .'"';
      }
      $matches[$prefix . $n] = check_plain($tag->name);
    }
  }

  drupal_json($matches);
}

