<?php

require_once('nsExport.inc'); 

/**
 * Implementation of hook_menu().
 */
function nsExport_menu() {
  $items['nsExport'] = array(
    'title' => t('Export csv'),
    'page callback' => 'nsExport_wizard',
    'access arguments' => array('access content')
  );
  return $items; 
}


/**
 * Implementation of hook_theme()
 */
function nsExport_theme() {
  $theme = array(
    'nsExport_fields_sort_filter_fields' => array(
      'arguments' => array('form' => NULL),
    ),
    'nsExport_filterfield_form' => array(
      'arguments' => array('form' => NULL),
      'function' => 'nsExport_form_theme',
    ),
    'nsExport_selectfield_form'=> array(
      'arguments' => array('form' => NULL),
      'function' => 'nsExport_form_theme',
    ),
    'nsExport_add_form'=> array(
      'arguments' => array('form' => NULL),
      'function' => 'nsExport_form_theme',
    ),
  );
  return $theme;
}


/*----- PART I CTOOLS WIZARD IMPLMENTATION ----- */

/**
 * menu callback for the multistep form 
 * step is whatever arg one is -- and will refer to the keys listed in
 * $form_info['order'], and $form_info['forms'] arrays
 */
function nsExport_wizard() { 
  // merlin hits that there's a better way to figure out the step
  $step = arg(1);
  // required includes for wizard
  ctools_include('wizard');
  ctools_include('object-cache');
  
  // *** SETUP ARRAY multistep setup **** see docs code
  $form_info = array(
    'id' => 'nsExport_basic',
    'path' => "nsExport/%step",
    'show trail' => TRUE,
    'show back' => TRUE,
    'show cancel' => false,
    'show return' =>false,
    'next text' => t('Proceed to next step'),
    'next callback' =>  'nsExport_basic_add_subtask_next',
    'finish callback' => 'nsExport_basic_add_subtask_finish',
    'return callback' => 'nsExport_basic_add_subtask_return',
    'cancel callback' => 'nsExport_basic_add_subtask_cancel',
    'order' => array(
      'create' => t('Step').' 1: '.t('Select query'),
      'filter' => t('Step').' 2: '.t('Add filter'),
      'select' => t('Step').' 3: '.t('Select fields'),
    ),
    'forms' => array(
      'create' => array(
        'form id' => 'nsExport_add_form'
      ),
      'filter' => array(
        'form id' => 'nsExport_filterfield_form'
      ),
      'select' => array(
        'form id' => 'nsExport_selectfield_form'
      ),
    ),
  );
  
  // *** SETTING THE FORM UP FOR MULTISTEP *** //
  $form_state = array(
    'cache name' => NULL,
  );
  // no matter the step, you will load your values from the callback page
  $nsExport = nsExport_basic_get_page_cache(NULL);
  if (!$nsExport) {
    // set form to first step -- we have no data
    $step = current(array_keys($form_info['order']));
    $nsExport = new stdClass();
    $nsExport->fur_texture = 'Very fuzzy';
    // ** set the storage object so its ready for whatever comes next
    ctools_object_cache_set('nsExport_basic', $form_state['cache name'], $nsExport);
  }
  //THIS IS WHERE WILL STORE ALL FORM DATA
  $form_state['nsExport_obs'] = $nsExport;
  
  // and this is the witchcraft that makes it work
  $output = ctools_wizard_multistep_form($form_info, $step, $form_state);
  return $output;
}

/*-------------------------- PART 2 JUST CLASSIC FORMAPI  ---------------------- */

/*----------------------------	STEP 1   ---------------------- */
/**
 * All forms within this wizard will take $form, and $form_state by reference
 * note that the form doesn't have a return value.
 */
function nsExport_add_form(&$form, &$form_state) {
	drupal_get_messages('warning');
  $form['exportType'] = array(
	  '#type' => 'select',
	  '#title' => t('Export type'),
	  '#options' => nsExport_get_All_Export(),
  );
  $form_state['no buttons'] = TRUE; 
}

/**
 * Note that this validate callback operates exactly like it does in the regular form api
 */
function nsExport_add_form_validate(&$from, &$form_state) {
  if (! $form_state['values']['exportType']) {
    form_set_error('Export', 'No export is selected !');
  }
}

/**
 * KEY CONCEPT: generally, you will never save data here -- you will simply add values to the 
 * yet to be saved ctools_cache object. 
 * 
 * Saving happens at the end, within the $form_info['finish callback'];
 */
function nsExport_add_form_submit(&$from, &$form_state) {
  $submitted = $form_state['values'];
  $save_values = array('exportType'); 

  foreach($save_values as $value) {
    // set it in cstorage, the voodoo in part 3 will take care of the rest magically
    $form_state['nsExport_obs']->$value = $submitted[$value];
  }
}


/*----------------------------	STEP 2   ---------------------- */

function nsExport_filterfield_form(&$form, &$form_state) {
  $nsExport = &$form_state['nsExport_obs'];
  if ($nsExport->exportType) {
		$filter = nsExport_get_FilterForOneExport($nsExport->exportType);
		if (($filter != null) && (count($filter)>0)) {
			nsExport_build_export_filter($form, $filter);
		}
		else {
			drupal_set_message(t('No filter defined for this export'), $type = 'warning');
		}
  }
  $form_state['no buttons'] = TRUE; 
}

function nsExport_filterfield_form_validate(&$from, &$form_state) {

}

function nsExport_filterfield_form_submit(&$form, &$form_state) {
	if ($form_state['values']['filter']) {
		foreach($form_state['values']['filter'] as $key => $value) {
			if (substr($key, 0, 7) == 'filter_') {
				$k = substr($key, 7);
				$form_state['nsExport_obs']->$k = $form_state['values']['filter'][$key];
			}
		}
	}
}


/*----------------------------	STEP 3   ---------------------- */

function nsExport_selectfield_form(&$form, &$form_state) {
  $nsExport = &$form_state['nsExport_obs'];
  if ($nsExport->exportType) {
		$fields = nsExport_get_FieldsForOneExport($nsExport->exportType);
		if (($fields != null) && (count($fields)>0)) {
			nsExport_build_export_fields($form, $fields);
		}
		else {
			drupal_set_message(t('No selectable field defined for this export'), $type = 'warning');
		}
  }
  $form_state['no buttons'] = TRUE; 
}

function nsExport_selectfield_form_validate(&$from, &$form_state) {
 foreach($form_state['values']['fields'] as $key => $value) {
			if ($form_state['values']['fields'][$key]['title'] == "") {
				form_set_error(t('Export'), t('Field name cannot be blank !'));
			}
		}
}

function nsExport_selectfield_form_submit(&$form, &$form_state) {
	if ($form_state['values']['fields']) {
		$form_state['nsExport_obs']->format = $form_state['values']['export']['format'];
		foreach($form_state['values']['fields'] as $key => $value) {
			$form_state['nsExport_obs']->fields->$key = array(
						'column'=>$key,
						'alias'=> $form_state['values']['fields'][$key]['title'],
						'weight'=>$form_state['values']['fields'][$key]['sort'],
						'check'=>$form_state['values']['fields'][$key]['check'] ,
				);
		}
	}
}

/*----PART 3 CTOOLS CALLBACKS -- these usually don't have to be very unique  ---------------------- */

/**
 * Callback generated when the add page process is finished.
 * this is where you'd normally save.
 */
function nsExport_basic_add_subtask_finish(&$form_state) {
  $nsExport = &$form_state['nsExport_obs'];
  // Clear the cache
  #ctools_object_cache_clear('nsExport_basic', $form_state['cache name']);
  $sql ="";
	$where="";
  if ($nsExport->exportType){
	  //Récupération de la requête
		$sqlexp = "SELECT esql FROM {myExport} WHERE eid = ".$nsExport->exportType	;
		$result = db_query($sqlexp, $args);
		while ($row = db_fetch_array($result)) {
			$sql = $row['esql'];
		}
		
		$where = brock_nsExport_build_sql_where($nsExport);
		
	  // Création de la clause SELECT de la requête
	  $fields = $nsExport->fields;
	  if ( ($fields != null)  && (count($fields)>0)){
			$select = nsExport_build_sql_selectField($fields);
	  }
	  else {
			$select=" * " ;
	  }
	  
	  $query= "SELECT ".$select. " FROM (". $sql. " ) AS query ";
	  if ($where != "") $query.=" WHERE ".$where;
	  //Récupération du format
	  nsExport_customreports_render($nsExport->format,  $query);
  }
 	$form_state['redirect'] = 'nsExport';
}


/**
 * Callback for the proceed step
 *
 */
function nsExport_basic_add_subtask_next(&$form_state) {
  $nsExport = &$form_state['nsExport_obs'];
  $cache = ctools_object_cache_set('nsExport_basic', $form_state['cache name'], $nsExport);
}

/**
 * Callback generated when the 'cancel' button is clicked.
 *
 * All we do here is clear the cache.
 */
function nsExport_basic_add_subtask_cancel(&$form_state) {
  // Update the cache with changes.
  ctools_object_cache_clear('nsExport_basic', $form_state['cache name']);
  $form_state['redirect'] = 'nsExport/create';
}

/**
 * Callback generated when the 'cancel' button is clicked.
 *
 * All we do here is clear the cache.
 */
function nsExport_basic_add_subtask_return(&$form_state) {
  // Update the cache with changes.
  ctools_object_cache_clear('nsExport_basic', $form_state['cache name']);
  $form_state['redirect'] = 'nsExport';
}

/*----PART 4 CTOOLS FORM STORAGE HANDLERS -- these usually don't have to be very unique  ---------------------- */

/**
 * Remove an item from the object cache.
 */
function  nsExport_basic_clear_page_cache($name) {
  ctools_object_cache_clear('nsExport_basic', $name);
}

/**
 * Get the cached changes to a given task handler.
 */
function nsExport_basic_get_page_cache($name) {
  $cache = ctools_object_cache_get('nsExport_basic', $name);
  return $cache;
}


/**
 * Theme a drag-sortable table of fields in the exposed filter
 * @param unknown_type $form
 */
function theme_nsExport_fields_sort_filter_fields($form) {	
  drupal_add_tabledrag('nsExport-filters-table-sort', 'order', 'self', 'sort');
  $header = array('', '', t('Fields'), 'Weight');
  $nb = count($form['fields']);
  foreach (element_children($form) as $key) {
    $row = array(''); // This is important. We need to start with an empty element for the drag handle.
    // Add class to group weight fields for drag and drop.
    $form[$key]['sort']['#attributes']['class'] = 'sort';
    $row[] = drupal_render($form[$key]['check']);
    $row[] = drupal_render($form[$key]['title']);
    $row[] = drupal_render($form[$key]['sort']);
    $rows[] = array('data' => $row, 'class' => 'draggable'); // note the difference between $row and $rows
  }
  $output = theme('table', $header, $rows, array('id' => 'nsExport-filters-table-sort'));
  $output .= drupal_render($form);
  return $output;
}


/**
 * Theme a drag-sortable table of fields in the exposed filter
 * @param unknown_type $form
 */
function nsExport_form_theme($form) {	
	$viewName = 'page_chapeau_telecharger_donnees';
	$display_id = 'block_1';
	$myArgs = array($tid);
	$output .=  views_embed_view($viewName, $display_id, $tid);
  $output .= drupal_render($form);
  return $output;
}
